Test failed: self = <feature_profile_test.TestProfileFeature object at 0x00000236F333DB90>

    @allure.title("Change profile name")
    @allure.severity("Critical")
    @pytest.mark.smoke
    def test_change_profile_name(self):
        self.login_page.open()
        self.login_page.enter_login(self.data.LOGIN)
        self.login_page.enter_password(self.data.PASSWORD)
        self.login_page.click_submit_button()
        self.dashboard_page.is_opened()
        self.dashboard_page.click_my_info_button()
        self.personal_page.is_opened()
        self.personal_page.change_name(f"Tester {random.randint(1, 100)}.")
>       self.personal_page.save_changes()

tests\feature_profile_test.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pages\personal_page.py:22: in save_changes
    self.is_clickable("xpath", self.save_personal_fields_button).click()
.venv\Lib\site-packages\selenium\webdriver\remote\webelement.py:94: in click
    self._execute(Command.CLICK_ELEMENT)
.venv\Lib\site-packages\selenium\webdriver\remote\webelement.py:395: in _execute
    return self._parent.execute(command, params)
.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:347: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000236F4068D10>
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...\n\\tRtlGetAppContainerNamedObjectPath [0x77A17C5E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77A17C2E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "<anonymous>")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "<anonymous>")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type="submit" class="oxd-button oxd-button--medium oxd-button--secondary orangehrm-left-space" data-v-10d463b7="" data-v-8c6e0396="">...</button> is not clickable at point (1783, 709). Other element would receive the click: <div class="oxd-form-loader" data-v-d5bfe35b="">...</div>
E         (Session info: chrome-headless-shell=122.0.6261.95)
E       Stacktrace:
E       	GetHandleVerifier [0x007C8C93+51395]
E       	(No symbol) [0x00735EF1]
E       	(No symbol) [0x005EE13A]
E       	(No symbol) [0x0062B8A2]
E       	(No symbol) [0x0062A0D4]
E       	(No symbol) [0x0062813B]
E       	(No symbol) [0x0062731A]
E       	(No symbol) [0x0061E54E]
E       	(No symbol) [0x00643E8C]
E       	(No symbol) [0x0061DF7E]
E       	(No symbol) [0x00644124]
E       	(No symbol) [0x0065A570]
E       	(No symbol) [0x00643C26]
E       	(No symbol) [0x0061C629]
E       	(No symbol) [0x0061D40D]
E       	GetHandleVerifier [0x00B46453+3711107]
E       	GetHandleVerifier [0x00B8583A+3970154]
E       	GetHandleVerifier [0x00B80B28+3950424]
E       	GetHandleVerifier [0x00879C99+776393]
E       	(No symbol) [0x007416C4]
E       	(No symbol) [0x0073C5A8]
E       	(No symbol) [0x0073C759]
E       	(No symbol) [0x0072DD80]
E       	BaseThreadInitThunk [0x762EFCC9+25]
E       	RtlGetAppContainerNamedObjectPath [0x77A17C5E+286]
E       	RtlGetAppContainerNamedObjectPath [0x77A17C2E+238]

.venv\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:229: ElementClickInterceptedException